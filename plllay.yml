---
  - name: Provision an EC2 Instance
    hosts: localhost
    connection: local
    gather_facts: False
    tags: provisioning
    # Necessary Variables for creating/provisioning the EC2 Instance
    vars:
      instance_type: t2.micro
      security_group: launch1 # Change the security group name here
      image: ami-ba602bc2 # This is an AMI i created myself
      keypair: main # This is one of my keys that i already have in AWS
      region: us-west-2 # Change the Region
      count: 1

    # Task that will be used to Launch/Create an EC2 Instance
    tasks:

      - name: Create a security group
        local_action: 
          module: ec2_group
          name: "{{ security_group }}"
          description: Security Group for webserver Servers
          region: "{{ region }}"
          rules:
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 80
              to_port: 80
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 443
              to_port: 443
              cidr_ip: 0.0.0.0/0
          rules_egress:
            - proto: all
              cidr_ip: 0.0.0.0/0
      
      - name: Launch the new EC2 Instance
        local_action: ec2 
                      group={{ security_group }} 
                      instance_type={{ instance_type}} 
                      image={{ image }} 
                      wait=true 
                      region={{ region }} 
                      keypair={{ keypair }}
                      count={{count}}
        register: ec2

      - name: Add all instance public IPs to host group
        add_host: hostname={{ item.public_ip }} groups=ec2hosts
        loop: "{{ ec2.instances }}"
        
      - name: Wait for SSH to come up
        local_action: wait_for 
                      host={{ item.public_ip }} 
                      port=22 
                      state=started
        with_items: "{{ ec2.instances }}"

      - name: Add tag to Instance(s)
        local_action: ec2_tag resource={{ item.id }} region={{ region }} state=present
        with_items: "{{ ec2.instances }}"
        args:
          tags:
            Name: webserver
            
            
  - hosts: ec2hosts
    name: Install the lamp via ansible
    user: ubuntu
    gather_facts: False
    become: yes
    become_method: sudo
    pre_tasks:
      - name: Install python for Ansible
        raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)
        register: output
        changed_when: output.stdout != ""
      - setup: # aka gather_facts
    
    tasks:
        
      - name: Enable UFW
        ufw: 
         direction: incoming
         policy: deny
         state: enabled

      - name: UFW allow port 22
        ufw:
         rule: allow
         port: 22
         
      - name: UFW allow port 80
        ufw:
         rule: allow
         port: 80
         
      - name: UFW allow port 3306
        ufw:
         rule: allow
         port: 3306

      - name: Install Apache2
        apt:
             name: "{{item}}"
             state: present
        with_items: 
          - apache2
          - apache2-doc
          - apache2-utils

      - name: Install Mysql Server
        apt:
          name: mysql-server
          state: present
          update_cache: yes
         
      - name: Install Mysql python module
        apt:
          name: python-mysqldb
          state: present

      - name: Start Mysql Server
        sudo: yes
        service: 
          name: mysql
          state: started
          enabled: true

      - name: Installing php
        apt: 
          name: "{{item}}" 
          state: present
        with_items:
        - php
        - php-bcmath
        - php-bz2
        - php-intl
        - php-gd
        - php-mbstring
        - php-mcrypt
        - php-mysql
        - php-zip

      - name: Install common PHP Extensions
        apt: 
          name: libapache2-mod-php
          state: present
        notify:
          - restart apache2
    handlers:
    - name: restart apache2
      service: 
        name: apache2
        state: restarted